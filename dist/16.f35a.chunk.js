(self.webpackChunkrandom_word_selector=self.webpackChunkrandom_word_selector||[]).push([[16],{16:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>d});var a=r(294),n=r(977);const s=function({settings:e,setSettings:t}){return a.createElement(a.Fragment,null,a.createElement("h2",null,"Settings"),a.createElement("div",{id:"settings",style:{width:"80%"}},a.createElement("input",{type:"checkbox",id:"display-meaning-setting",onChange:e=>t({shouldShowMeaning:e.target.checked}),checked:e.shouldShowMeaning}),a.createElement("label",{htmlFor:"display-meaning-setting"},"Display Meaning of current word")),a.createElement("br",null))};var l=r(997),i=r(61);const o=function(e){const{words:t,apiKey:r,setApiKey:n,settings:s,setCustomWords:o,customWords:c,dataSource:u,setDataSource:d}=e,m=(0,a.useMemo)((()=>null!==c?c:s.isCustomWords?JSON.stringify(t,null,2):void 0),[c]);return a.createElement(a.Fragment,null,a.createElement("h2",null,"Data source"),a.createElement("div",{id:"words-input-div",style:{width:"100%",display:"flex",flexDirection:"row",flexWrap:"wrap"}},a.createElement("div",{id:"source-setting",style:{width:"20%"}},a.createElement("input",{id:"input-source-static",name:"data-source",type:"radio",onClick:()=>d(i.N.STATIC),defaultChecked:u===i.N.STATIC}),a.createElement("label",{htmlFor:"input-source-static"},a.createElement("strong",null,"Static list")),a.createElement("br",null),a.createElement("br",null),a.createElement("input",{id:"input-source-api",name:"data-source",type:"radio",onClick:()=>d(i.N.API),defaultChecked:u===i.N.API}),a.createElement("label",{htmlFor:"input-source-api"},a.createElement("strong",null,"RapidAPI"))),a.createElement("div",{id:"source-input",style:{width:"80%"}},u===i.N.STATIC?a.createElement("textarea",{id:"input-static-list",onChange:e=>o(e.target.value),placeholder:l.Q,style:{height:"50vh",width:"80%"},value:m}):a.createElement("input",{id:"input-api-key",onChange:e=>n(e.target.value),placeholder:"Add RapidAPI access key here.",style:{height:"15vh",width:"80%"},value:r}))))};var c=r(825),u=r(844);const d=function(){const e=(0,n.k6)(),[t,r]=(0,c.o)(),[d,m]=(0,u.d)(),[h,p]=(0,a.useState)(null),[g,y]=(0,a.useState)(d.apiKey),[E,w]=(0,a.useState)(d.dataSource);return a.createElement(a.Fragment,null,a.createElement(o,{words:t,apiKey:g,setApiKey:y,settings:d,dataSource:E,customWords:h,setDataSource:w,setCustomWords:p}),a.createElement(s,{settings:d,setSettings:m}),a.createElement("button",{style:{height:"2em",fontSize:"1.25em"},onClick:()=>{try{E===i.N.STATIC&&(()=>{if(null!==h){let e;try{e=JSON.parse(h||JSON.stringify(l.X))}catch(e){const t="Passed data must be a valid JSON Array. Could not parse passed list.";throw console.error(t,e),new Error(t)}if(!Array.isArray(e))throw new Error("Custom words needs to be an array.");if(e.some((({word:e})=>!e)))throw new Error("Every element in passed data must have a `word` property.");r(e)}m({dataSource:E,isCustomWords:!!h})})(),E===i.N.API&&(()=>{if(!g){const e="API key is required for RapidAPI data source.";throw console.error(e),new Error(e)}m({dataSource:E,apiKey:g})})(),e.push("/selector")}catch(e){alert(e.message)}}},"Submit"))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,