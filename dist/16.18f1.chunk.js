(self.webpackChunkrandom_word_selector=self.webpackChunkrandom_word_selector||[]).push([[16],{16:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>m});var r=n(294),a=n(977);const o=function({settings:e,setSettings:t}){return r.createElement(r.Fragment,null,r.createElement("h2",null,"Settings"),r.createElement("div",{id:"settings",style:{width:"80%"}},r.createElement("input",{type:"checkbox",id:"display-meaning-setting",onChange:e=>t({shouldShowMeaning:e.target.checked}),checked:e.shouldShowMeaning}),r.createElement("label",{htmlFor:"display-meaning-setting"},"Display the meaning of current word")),r.createElement("br",null))};var i=n(997),s=n(61);const l=function(e){const{setCustomWords:t,customWords:n,dataSource:a,setDataSource:o}=e;return r.createElement(r.Fragment,null,r.createElement("h2",null,"Data source"),r.createElement("div",{id:"words-input-div",style:{width:"100%",display:"flex",flexDirection:"row",flexWrap:"wrap"}},r.createElement("div",{id:"source-setting",style:{width:"20%"}},r.createElement("input",{id:"input-source-static",name:"data-source",type:"radio",onClick:()=>o(s.N.STATIC),defaultChecked:a===s.N.STATIC}),r.createElement("label",{htmlFor:"input-source-static"},r.createElement("strong",null,"Static list")),r.createElement("br",null),r.createElement("br",null),r.createElement("input",{id:"input-source-api",name:"data-source",type:"radio",onClick:()=>o(s.N.API),defaultChecked:a===s.N.API}),r.createElement("label",{htmlFor:"input-source-api"},r.createElement("strong",null,"API source"))),r.createElement("div",{id:"source-input",style:{width:"80%"}},a===s.N.STATIC?r.createElement("textarea",{id:"input-static-list",onChange:e=>t(e.target.value),placeholder:i.Q,style:{height:"50vh",width:"80%"},value:n}):r.createElement("em",{style:{height:"15vh",width:"80%"}},'Data will be fetched from "',s.W,'".'))))};var d=n(825),u=n(844);const m=function(){const e=(0,a.k6)(),[t,n,i]=(0,d.o)(),[m,c]=(0,u.d)(),{dataSource:g,shouldShowMeaning:w}=m,h=t&&JSON.stringify(t,null,2)||"",[E,p]=(0,r.useState)(h),[y,f]=(0,r.useState)(g);return r.createElement(r.Fragment,null,r.createElement(l,{words:t,settings:m,dataSource:y,customWords:E,setDataSource:f,setCustomWords:p}),r.createElement(o,{settings:m,setSettings:c}),r.createElement("button",{style:{height:"2em",fontSize:"1.25em"},onClick:()=>{try{y===s.N.STATIC&&(()=>{if(!E)return void i();const e=function(e,t){let n;try{n=JSON.parse(e)}catch(e){throw new Error("Passed data must be a valid JSON Array. Could not parse passed list.")}if(!Array.isArray(n))throw new Error("Custom words needs to be an array.");for(let{word:e,meaning:r}of n){if(!e)throw new Error(`Every element in passed data must have a "word" ${t?'as well as a "meaning"':""} property.`);if(t&&!r)throw new Error('Every element in passed data must have a "meaning" property. Turn off "Display meaning of current word" setting to continue without "meaning" property.')}return n}(E,w);n(e)})(),c({dataSource:y}),e.push("/selector")}catch(e){console.error(e),alert(e.message)}}},"Submit"))}},997:(e,t,n)=>{"use strict";n.d(t,{X:()=>r,Q:()=>a});const r=[{word:"FLABBERGASTED",meaning:"As if struck dumb with astonishment and surprise"},{word:"ARCANE",meaning:"Requiring secret or mysterious knowledge"},{word:"GLUTTONY",meaning:"Habitual eating to excess"},{word:"EMPATHY",meaning:"Understanding and entering into another s feelings"},{word:"INEPT",meaning:"Generally incompetent and ineffectual"},{word:"IMPECCABLE",meaning:"Without fault or error"},{word:"EMBEZZLE",meaning:"Appropriate fraudulently to one s own use"},{word:"ABERRATION",meaning:"A state or condition markedly different from the norm"},{word:"DEFERENTIAL",meaning:"Showing courteous regard for people s feelings"},{word:"CUMULATIVE",meaning:"Increasing by successive addition"},{word:"INSATIABLE",meaning:"Impossible to satisfy"},{word:"BRUSQUE",meaning:"Rudely abrupt or blunt in speech or manner"},{word:"INHIBIT",meaning:"Limit the range or extent of"},{word:"CANDOR",meaning:"The quality of being honest and straightforward"},{word:"COMPLACENCY",meaning:"The feeling you have when you are satisfied with yourself"},{word:"GRATUITOUS",meaning:"Unnecessary and unwarranted"},{word:"CONFIDANT",meaning:"Someone to whom private matters are told"},{word:"ELATED",meaning:"Exultantly proud and joyful in high spiritsp"},{word:"FABRICATE",meaning:"Make up something artificial or untrue"},{word:"CALLOUS",meaning:"Emotionally hardened"},{word:"INNATE",meaning:"Present at birth but not necessarily hereditary"},{word:"COERCE",meaning:"Cause to do through pressure or necessity"},{word:"BRAZEN",meaning:"Unrestrained by convention or propriety"},{word:"COHERENT",meaning:"Marked by an orderly and consistent relation of parts"},{word:"APPEASE",meaning:"Make peace with"},{word:"HYPOCRISY",meaning:"Pretending to have qualities or beliefs that you do not have"},{word:"ABHOR",meaning:"Find repugnant"},{word:"INFAMY",meaning:"A state of extreme dishonor"},{word:"FORSAKE",meaning:"Leave someone who needs or counts on you leave in the lurch"},{word:"DILIGENT",meaning:"Quietly and steadily persevering in detail or exactness"},{word:"AMIABLE",meaning:"Diffusing warmth and friendliness"},{word:"ELOQUENT",meaning:"Expressing yourself readily clearly effectively"},{word:"ENMITY",meaning:"A state of deep seated ill will"},{word:"IMPERTINENT",meaning:"Improperly forward or bold"},{word:"IMPUDENT",meaning:"Improperly forward or bold"}],a=`Enter words array here...\nEg:-\n${JSON.stringify(r.slice(0,2),null,2)}\n`}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYW5kb20td29yZC1zZWxlY3Rvci8uL3NyYy9jb21wb25lbnRzL1NldHRpbmdzLmpzIiwid2VicGFjazovL3JhbmRvbS13b3JkLXNlbGVjdG9yLy4vc3JjL2NvbXBvbmVudHMvRGF0YVNvdXJjZS5qcyIsIndlYnBhY2s6Ly9yYW5kb20td29yZC1zZWxlY3Rvci8uL3NyYy9jb21wb25lbnRzL0hvbWUuanMiLCJ3ZWJwYWNrOi8vcmFuZG9tLXdvcmQtc2VsZWN0b3IvLi9zcmMvZGF0YS5qcyJdLCJuYW1lcyI6WyJzZXR0aW5ncyIsInNldFNldHRpbmdzIiwiaWQiLCJzdHlsZSIsIndpZHRoIiwidHlwZSIsIm9uQ2hhbmdlIiwiZSIsInNob3VsZFNob3dNZWFuaW5nIiwidGFyZ2V0IiwiY2hlY2tlZCIsImh0bWxGb3IiLCJwcm9wcyIsInNldEN1c3RvbVdvcmRzIiwiY3VzdG9tV29yZHMiLCJkYXRhU291cmNlIiwic2V0RGF0YVNvdXJjZSIsImRpc3BsYXkiLCJmbGV4RGlyZWN0aW9uIiwiZmxleFdyYXAiLCJuYW1lIiwib25DbGljayIsIkRhdGFTb3VyY2VzIiwiZGVmYXVsdENoZWNrZWQiLCJldnQiLCJ2YWx1ZSIsInBsYWNlaG9sZGVyIiwiUExBQ0VIT0xERVJfVEVYVCIsImhlaWdodCIsIlJBTkRPTV9XT1JEX0FQSV9VUkwiLCJoaXN0b3J5IiwidXNlSGlzdG9yeSIsIndvcmRzIiwic2V0V29yZHMiLCJyZXNldFdvcmRzIiwidXNlV29yZHNTdGF0ZSIsInVzZVNldHRpbmdzU3RhdGUiLCJkYXRhU291cmNlU2V0dGluZyIsImRlZmF1bHRDdXN0b21Xb3JkcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJ1c2VTdGF0ZSIsImZvbnRTaXplIiwicGFyc2VkQ3VzdG9tV29yZHMiLCJwYXJzZSIsIkVycm9yIiwiQXJyYXkiLCJpc0FycmF5Iiwid29yZCIsIm1lYW5pbmciLCJwYXJzZUN1c3RvbVdvcmRzIiwidXBkYXRlQ3VzdG9tU3RhdGljRGF0YSIsInB1c2giLCJjb25zb2xlIiwiZXJyb3IiLCJhbGVydCIsIm1lc3NhZ2UiLCJERUZBVUxUX1dPUkRTIiwic2xpY2UiXSwibWFwcGluZ3MiOiI0S0FvQkEsUUFsQkEsVUFBa0IsU0FBRUEsRUFBRixZQUFZQyxJQUM1QixPQUNFLGdDQUNFLHNDQUNBLHVCQUFLQyxHQUFHLFdBQVdDLE1BQU8sQ0FBRUMsTUFBTyxRQUNqQyx5QkFDRUMsS0FBSyxXQUNMSCxHQUFHLDBCQUNISSxTQUFXQyxHQUFNTixFQUFZLENBQUVPLGtCQUFtQkQsRUFBRUUsT0FBT0MsVUFDM0RBLFFBQVNWLEVBQVNRLG9CQUVwQix5QkFBT0csUUFBUSwyQkFBZix3Q0FFRiw2QixxQkMwQ04sUUFwREEsU0FBb0JDLEdBQ2xCLE1BQU0sZUFBRUMsRUFBRixZQUFrQkMsRUFBbEIsV0FBK0JDLEVBQS9CLGNBQTJDQyxHQUFrQkosRUFFbkUsT0FDRSxnQ0FDRSx5Q0FDQSx1QkFBS1YsR0FBRyxrQkFBa0JDLE1BQU8sQ0FBRUMsTUFBTyxPQUFRYSxRQUFTLE9BQVFDLGNBQWUsTUFBT0MsU0FBVSxTQUNqRyx1QkFBS2pCLEdBQUcsaUJBQWlCQyxNQUFPLENBQUVDLE1BQU8sUUFDdkMseUJBQ0VGLEdBQUcsc0JBQ0hrQixLQUFLLGNBQ0xmLEtBQUssUUFDTGdCLFFBQVMsSUFBTUwsRUFBY00sWUFDN0JDLGVBQWdCUixJQUFlTyxhQUVqQyx5QkFBT1gsUUFBUSx1QkFDYiw4Q0FHRiwyQkFDQSwyQkFFQSx5QkFDRVQsR0FBRyxtQkFDSGtCLEtBQUssY0FDTGYsS0FBSyxRQUNMZ0IsUUFBUyxJQUFNTCxFQUFjTSxTQUM3QkMsZUFBZ0JSLElBQWVPLFVBRWpDLHlCQUFPWCxRQUFRLG9CQUNiLDhDQUlKLHVCQUFLVCxHQUFHLGVBQWVDLE1BQU8sQ0FBRUMsTUFBTyxRQUNwQ1csSUFBZU8sV0FDZCw0QkFDRXBCLEdBQUcsb0JBQ0hJLFNBQVdrQixHQUFRWCxFQUFlVyxFQUFJZixPQUFPZ0IsT0FDN0NDLFlBQWFDLElBQ2J4QixNQUFPLENBQUV5QixPQUFR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QUNJLEtBQVEsV0FDUixRQUFXLG1EQUVmLENBQ0ksS0FBUSxTQUNSLFFBQVcsbUNBRWYsQ0FDSSxLQUFRLGNBQ1IsUUFBVyw4QkFFZixDQUNJLEtBQVEsV0FDUixRQUFXLCtCQUlOOUIsRUFBb0Isb0NBRS9CWSxLQUFLQyxVQUFVaUIsRUFBY0MsTUFBTSxFQUFHLEdBQUksS0FBTSIsImZpbGUiOiIxNi4xOGYxLmNodW5rLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZnVuY3Rpb24gU2V0dGluZ3MoeyBzZXR0aW5ncywgc2V0U2V0dGluZ3MgfSkge1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8aDI+U2V0dGluZ3M8L2gyPlxuICAgICAgPGRpdiBpZD1cInNldHRpbmdzXCIgc3R5bGU9e3sgd2lkdGg6ICc4MCUnIH19PlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgIGlkPVwiZGlzcGxheS1tZWFuaW5nLXNldHRpbmdcIlxuICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0U2V0dGluZ3MoeyBzaG91bGRTaG93TWVhbmluZzogZS50YXJnZXQuY2hlY2tlZCB9KX1cbiAgICAgICAgICBjaGVja2VkPXtzZXR0aW5ncy5zaG91bGRTaG93TWVhbmluZ31cbiAgICAgICAgLz5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJkaXNwbGF5LW1lYW5pbmctc2V0dGluZ1wiPkRpc3BsYXkgdGhlIG1lYW5pbmcgb2YgY3VycmVudCB3b3JkPC9sYWJlbD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGJyIC8+XG4gICAgPC8+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNldHRpbmdzO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IFBMQUNFSE9MREVSX1RFWFQgfSBmcm9tICcuLi9kYXRhJztcbmltcG9ydCB7IERhdGFTb3VyY2VzLCBSQU5ET01fV09SRF9BUElfVVJMIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuZnVuY3Rpb24gRGF0YVNvdXJjZShwcm9wcykge1xuICBjb25zdCB7IHNldEN1c3RvbVdvcmRzLCBjdXN0b21Xb3JkcywgZGF0YVNvdXJjZSwgc2V0RGF0YVNvdXJjZSB9ID0gcHJvcHM7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGgyPkRhdGEgc291cmNlPC9oMj5cbiAgICAgIDxkaXYgaWQ9XCJ3b3Jkcy1pbnB1dC1kaXZcIiBzdHlsZT17eyB3aWR0aDogJzEwMCUnLCBkaXNwbGF5OiAnZmxleCcsIGZsZXhEaXJlY3Rpb246ICdyb3cnLCBmbGV4V3JhcDogJ3dyYXAnIH19PlxuICAgICAgICA8ZGl2IGlkPVwic291cmNlLXNldHRpbmdcIiBzdHlsZT17eyB3aWR0aDogJzIwJScgfX0+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICBpZD1cImlucHV0LXNvdXJjZS1zdGF0aWNcIlxuICAgICAgICAgICAgbmFtZT1cImRhdGEtc291cmNlXCJcbiAgICAgICAgICAgIHR5cGU9XCJyYWRpb1wiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXREYXRhU291cmNlKERhdGFTb3VyY2VzLlNUQVRJQyl9XG4gICAgICAgICAgICBkZWZhdWx0Q2hlY2tlZD17ZGF0YVNvdXJjZSA9PT0gRGF0YVNvdXJjZXMuU1RBVElDfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJpbnB1dC1zb3VyY2Utc3RhdGljXCI+XG4gICAgICAgICAgICA8c3Ryb25nPlN0YXRpYyBsaXN0PC9zdHJvbmc+XG4gICAgICAgICAgPC9sYWJlbD5cblxuICAgICAgICAgIDxiciAvPlxuICAgICAgICAgIDxiciAvPlxuXG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICBpZD1cImlucHV0LXNvdXJjZS1hcGlcIlxuICAgICAgICAgICAgbmFtZT1cImRhdGEtc291cmNlXCJcbiAgICAgICAgICAgIHR5cGU9XCJyYWRpb1wiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXREYXRhU291cmNlKERhdGFTb3VyY2VzLkFQSSl9XG4gICAgICAgICAgICBkZWZhdWx0Q2hlY2tlZD17ZGF0YVNvdXJjZSA9PT0gRGF0YVNvdXJjZXMuQVBJfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJpbnB1dC1zb3VyY2UtYXBpXCI+XG4gICAgICAgICAgICA8c3Ryb25nPkFQSSBzb3VyY2U8L3N0cm9uZz5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGlkPVwic291cmNlLWlucHV0XCIgc3R5bGU9e3sgd2lkdGg6ICc4MCUnIH19PlxuICAgICAgICAgIHtkYXRhU291cmNlID09PSBEYXRhU291cmNlcy5TVEFUSUMgPyAoXG4gICAgICAgICAgICA8dGV4dGFyZWFcbiAgICAgICAgICAgICAgaWQ9XCJpbnB1dC1zdGF0aWMtbGlzdFwiXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZXZ0KSA9PiBzZXRDdXN0b21Xb3JkcyhldnQudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e1BMQUNFSE9MREVSX1RFWFR9XG4gICAgICAgICAgICAgIHN0eWxlPXt7IGhlaWdodDogJzUwdmgnLCB3aWR0aDogJzgwJScgfX1cbiAgICAgICAgICAgICAgdmFsdWU9e2N1c3RvbVdvcmRzfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPGVtIHN0eWxlPXt7IGhlaWdodDogJzE1dmgnLCB3aWR0aDogJzgwJScgfX0+RGF0YSB3aWxsIGJlIGZldGNoZWQgZnJvbSBcIntSQU5ET01fV09SRF9BUElfVVJMfVwiLjwvZW0+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8Lz5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgRGF0YVNvdXJjZTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUhpc3RvcnkgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuXG5pbXBvcnQgU2V0dGluZ3MgZnJvbSAnLi9TZXR0aW5ncyc7XG5pbXBvcnQgRGF0YVNvdXJjZSBmcm9tICcuL0RhdGFTb3VyY2UnO1xuaW1wb3J0IHsgRGF0YVNvdXJjZXMgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgdXNlV29yZHNTdGF0ZSB9IGZyb20gJy4uL2NvbnRleHRzL3dvcmRzJztcbmltcG9ydCB7IHVzZVNldHRpbmdzU3RhdGUgfSBmcm9tICcuLi9jb250ZXh0cy9zZXR0aW5ncyc7XG5cbmZ1bmN0aW9uIEhvbWUoKSB7XG4gIGNvbnN0IGhpc3RvcnkgPSB1c2VIaXN0b3J5KCk7XG4gIGNvbnN0IFt3b3Jkcywgc2V0V29yZHMsIHJlc2V0V29yZHNdID0gdXNlV29yZHNTdGF0ZSgpO1xuICBjb25zdCBbc2V0dGluZ3MsIHNldFNldHRpbmdzXSA9IHVzZVNldHRpbmdzU3RhdGUoKTtcblxuICBjb25zdCB7IGRhdGFTb3VyY2U6IGRhdGFTb3VyY2VTZXR0aW5nLCBzaG91bGRTaG93TWVhbmluZyB9ID0gc2V0dGluZ3M7XG5cbiAgY29uc3QgZGVmYXVsdEN1c3RvbVdvcmRzID0gKHdvcmRzICYmIEpTT04uc3RyaW5naWZ5KHdvcmRzLCBudWxsLCAyKSkgfHwgJyc7XG4gIGNvbnN0IFtjdXN0b21Xb3Jkcywgc2V0Q3VzdG9tV29yZHNdID0gdXNlU3RhdGUoZGVmYXVsdEN1c3RvbVdvcmRzKTtcbiAgY29uc3QgW2RhdGFTb3VyY2UsIHNldERhdGFTb3VyY2VdID0gdXNlU3RhdGUoZGF0YVNvdXJjZVNldHRpbmcpO1xuXG4gIGNvbnN0IHVwZGF0ZUN1c3RvbVN0YXRpY0RhdGEgPSAoKSA9PiB7XG4gICAgaWYgKCFjdXN0b21Xb3Jkcykge1xuICAgICAgcmVzZXRXb3JkcygpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcGFyc2VkQ3VzdG9tV29yZHMgPSBwYXJzZUN1c3RvbVdvcmRzKGN1c3RvbVdvcmRzLCBzaG91bGRTaG93TWVhbmluZyk7XG4gICAgc2V0V29yZHMocGFyc2VkQ3VzdG9tV29yZHMpO1xuICB9O1xuXG4gIGNvbnN0IG9uU3VibWl0ID0gKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAoZGF0YVNvdXJjZSA9PT0gRGF0YVNvdXJjZXMuU1RBVElDKSB7XG4gICAgICAgIHVwZGF0ZUN1c3RvbVN0YXRpY0RhdGEoKTtcbiAgICAgIH1cblxuICAgICAgc2V0U2V0dGluZ3MoeyBkYXRhU291cmNlIH0pO1xuICAgICAgaGlzdG9yeS5wdXNoKCcvc2VsZWN0b3InKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgYWxlcnQoZS5tZXNzYWdlKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPERhdGFTb3VyY2Ugey4uLnsgd29yZHMsIHNldHRpbmdzLCBkYXRhU291cmNlLCBjdXN0b21Xb3Jkcywgc2V0RGF0YVNvdXJjZSwgc2V0Q3VzdG9tV29yZHMgfX0gLz5cbiAgICAgIDxTZXR0aW5ncyBzZXR0aW5ncz17c2V0dGluZ3N9IHNldFNldHRpbmdzPXtzZXRTZXR0aW5nc30gLz5cbiAgICAgIDxidXR0b24gc3R5bGU9e3sgaGVpZ2h0OiAnMmVtJywgZm9udFNpemU6ICcxLjI1ZW0nIH19IG9uQ2xpY2s9e29uU3VibWl0fT5cbiAgICAgICAgU3VibWl0XG4gICAgICA8L2J1dHRvbj5cbiAgICA8Lz5cbiAgKTtcbn1cblxuLyoqXG4gKiBQYXJzZXMgYW5kIHZhbGlkYXRlcyB0aGUgcGFzc2VkIGN1c3RvbSB3b3JkcyBhbmQgdGhyb3dzIGFwcHJvcHJpYXRlIGVycm9ycy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY3VzdG9tV29yZHNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvdWxkU2hvd01lYW5pbmdcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlQ3VzdG9tV29yZHMoY3VzdG9tV29yZHMsIHNob3VsZFNob3dNZWFuaW5nKSB7XG4gIGxldCBwYXJzZWRDdXN0b21Xb3JkcztcblxuICB0cnkge1xuICAgIHBhcnNlZEN1c3RvbVdvcmRzID0gSlNPTi5wYXJzZShjdXN0b21Xb3Jkcyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Bhc3NlZCBkYXRhIG11c3QgYmUgYSB2YWxpZCBKU09OIEFycmF5LiBDb3VsZCBub3QgcGFyc2UgcGFzc2VkIGxpc3QuJyk7XG4gIH1cblxuICBpZiAoIUFycmF5LmlzQXJyYXkocGFyc2VkQ3VzdG9tV29yZHMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDdXN0b20gd29yZHMgbmVlZHMgdG8gYmUgYW4gYXJyYXkuJyk7XG4gIH1cblxuICBmb3IgKGxldCB7IHdvcmQsIG1lYW5pbmcgfSBvZiBwYXJzZWRDdXN0b21Xb3Jkcykge1xuICAgIGlmICghd29yZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgRXZlcnkgZWxlbWVudCBpbiBwYXNzZWQgZGF0YSBtdXN0IGhhdmUgYSBcIndvcmRcIiAke3Nob3VsZFNob3dNZWFuaW5nID8gJ2FzIHdlbGwgYXMgYSBcIm1lYW5pbmdcIicgOiAnJ30gcHJvcGVydHkuYFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkU2hvd01lYW5pbmcgJiYgIW1lYW5pbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEV2ZXJ5IGVsZW1lbnQgaW4gcGFzc2VkIGRhdGEgbXVzdCBoYXZlIGEgXCJtZWFuaW5nXCIgcHJvcGVydHkuIFR1cm4gb2ZmIFwiRGlzcGxheSBtZWFuaW5nIG9mIGN1cnJlbnQgd29yZFwiIHNldHRpbmcgdG8gY29udGludWUgd2l0aG91dCBcIm1lYW5pbmdcIiBwcm9wZXJ0eS5gXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJzZWRDdXN0b21Xb3Jkcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgSG9tZTtcbiIsImV4cG9ydCBjb25zdCBERUZBVUxUX1dPUkRTID0gW1xuICAgIHtcbiAgICAgICAgXCJ3b3JkXCI6IFwiRkxBQkJFUkdBU1RFRFwiLFxuICAgICAgICBcIm1lYW5pbmdcIjogXCJBcyBpZiBzdHJ1Y2sgZHVtYiB3aXRoIGFzdG9uaXNobWVudCBhbmQgc3VycHJpc2VcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIndvcmRcIjogXCJBUkNBTkVcIixcbiAgICAgICAgXCJtZWFuaW5nXCI6IFwiUmVxdWlyaW5nIHNlY3JldCBvciBteXN0ZXJpb3VzIGtub3dsZWRnZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwid29yZFwiOiBcIkdMVVRUT05ZXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIkhhYml0dWFsIGVhdGluZyB0byBleGNlc3NcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIndvcmRcIjogXCJFTVBBVEhZXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIlVuZGVyc3RhbmRpbmcgYW5kIGVudGVyaW5nIGludG8gYW5vdGhlciBzIGZlZWxpbmdzXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ3b3JkXCI6IFwiSU5FUFRcIixcbiAgICAgICAgXCJtZWFuaW5nXCI6IFwiR2VuZXJhbGx5IGluY29tcGV0ZW50IGFuZCBpbmVmZmVjdHVhbFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwid29yZFwiOiBcIklNUEVDQ0FCTEVcIixcbiAgICAgICAgXCJtZWFuaW5nXCI6IFwiV2l0aG91dCBmYXVsdCBvciBlcnJvclwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwid29yZFwiOiBcIkVNQkVaWkxFXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIkFwcHJvcHJpYXRlIGZyYXVkdWxlbnRseSB0byBvbmUgcyBvd24gdXNlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ3b3JkXCI6IFwiQUJFUlJBVElPTlwiLFxuICAgICAgICBcIm1lYW5pbmdcIjogXCJBIHN0YXRlIG9yIGNvbmRpdGlvbiBtYXJrZWRseSBkaWZmZXJlbnQgZnJvbSB0aGUgbm9ybVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwid29yZFwiOiBcIkRFRkVSRU5USUFMXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIlNob3dpbmcgY291cnRlb3VzIHJlZ2FyZCBmb3IgcGVvcGxlIHMgZmVlbGluZ3NcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIndvcmRcIjogXCJDVU1VTEFUSVZFXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIkluY3JlYXNpbmcgYnkgc3VjY2Vzc2l2ZSBhZGRpdGlvblwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwid29yZFwiOiBcIklOU0FUSUFCTEVcIixcbiAgICAgICAgXCJtZWFuaW5nXCI6IFwiSW1wb3NzaWJsZSB0byBzYXRpc2Z5XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ3b3JkXCI6IFwiQlJVU1FVRVwiLFxuICAgICAgICBcIm1lYW5pbmdcIjogXCJSdWRlbHkgYWJydXB0IG9yIGJsdW50IGluIHNwZWVjaCBvciBtYW5uZXJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIndvcmRcIjogXCJJTkhJQklUXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIkxpbWl0IHRoZSByYW5nZSBvciBleHRlbnQgb2ZcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIndvcmRcIjogXCJDQU5ET1JcIixcbiAgICAgICAgXCJtZWFuaW5nXCI6IFwiVGhlIHF1YWxpdHkgb2YgYmVpbmcgaG9uZXN0IGFuZCBzdHJhaWdodGZvcndhcmRcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIndvcmRcIjogXCJDT01QTEFDRU5DWVwiLFxuICAgICAgICBcIm1lYW5pbmdcIjogXCJUaGUgZmVlbGluZyB5b3UgaGF2ZSB3aGVuIHlvdSBhcmUgc2F0aXNmaWVkIHdpdGggeW91cnNlbGZcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIndvcmRcIjogXCJHUkFUVUlUT1VTXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIlVubmVjZXNzYXJ5IGFuZCB1bndhcnJhbnRlZFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwid29yZFwiOiBcIkNPTkZJREFOVFwiLFxuICAgICAgICBcIm1lYW5pbmdcIjogXCJTb21lb25lIHRvIHdob20gcHJpdmF0ZSBtYXR0ZXJzIGFyZSB0b2xkXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ3b3JkXCI6IFwiRUxBVEVEXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIkV4dWx0YW50bHkgcHJvdWQgYW5kIGpveWZ1bCBpbiBoaWdoIHNwaXJpdHNwXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ3b3JkXCI6IFwiRkFCUklDQVRFXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIk1ha2UgdXAgc29tZXRoaW5nIGFydGlmaWNpYWwgb3IgdW50cnVlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ3b3JkXCI6IFwiQ0FMTE9VU1wiLFxuICAgICAgICBcIm1lYW5pbmdcIjogXCJFbW90aW9uYWxseSBoYXJkZW5lZFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwid29yZFwiOiBcIklOTkFURVwiLFxuICAgICAgICBcIm1lYW5pbmdcIjogXCJQcmVzZW50IGF0IGJpcnRoIGJ1dCBub3QgbmVjZXNzYXJpbHkgaGVyZWRpdGFyeVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwid29yZFwiOiBcIkNPRVJDRVwiLFxuICAgICAgICBcIm1lYW5pbmdcIjogXCJDYXVzZSB0byBkbyB0aHJvdWdoIHByZXNzdXJlIG9yIG5lY2Vzc2l0eVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwid29yZFwiOiBcIkJSQVpFTlwiLFxuICAgICAgICBcIm1lYW5pbmdcIjogXCJVbnJlc3RyYWluZWQgYnkgY29udmVudGlvbiBvciBwcm9wcmlldHlcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIndvcmRcIjogXCJDT0hFUkVOVFwiLFxuICAgICAgICBcIm1lYW5pbmdcIjogXCJNYXJrZWQgYnkgYW4gb3JkZXJseSBhbmQgY29uc2lzdGVudCByZWxhdGlvbiBvZiBwYXJ0c1wiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwid29yZFwiOiBcIkFQUEVBU0VcIixcbiAgICAgICAgXCJtZWFuaW5nXCI6IFwiTWFrZSBwZWFjZSB3aXRoXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ3b3JkXCI6IFwiSFlQT0NSSVNZXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIlByZXRlbmRpbmcgdG8gaGF2ZSBxdWFsaXRpZXMgb3IgYmVsaWVmcyB0aGF0IHlvdSBkbyBub3QgaGF2ZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwid29yZFwiOiBcIkFCSE9SXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIkZpbmQgcmVwdWduYW50XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ3b3JkXCI6IFwiSU5GQU1ZXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIkEgc3RhdGUgb2YgZXh0cmVtZSBkaXNob25vclwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwid29yZFwiOiBcIkZPUlNBS0VcIixcbiAgICAgICAgXCJtZWFuaW5nXCI6IFwiTGVhdmUgc29tZW9uZSB3aG8gbmVlZHMgb3IgY291bnRzIG9uIHlvdSBsZWF2ZSBpbiB0aGUgbHVyY2hcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIndvcmRcIjogXCJESUxJR0VOVFwiLFxuICAgICAgICBcIm1lYW5pbmdcIjogXCJRdWlldGx5IGFuZCBzdGVhZGlseSBwZXJzZXZlcmluZyBpbiBkZXRhaWwgb3IgZXhhY3RuZXNzXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ3b3JkXCI6IFwiQU1JQUJMRVwiLFxuICAgICAgICBcIm1lYW5pbmdcIjogXCJEaWZmdXNpbmcgd2FybXRoIGFuZCBmcmllbmRsaW5lc3NcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIndvcmRcIjogXCJFTE9RVUVOVFwiLFxuICAgICAgICBcIm1lYW5pbmdcIjogXCJFeHByZXNzaW5nIHlvdXJzZWxmIHJlYWRpbHkgY2xlYXJseSBlZmZlY3RpdmVseVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwid29yZFwiOiBcIkVOTUlUWVwiLFxuICAgICAgICBcIm1lYW5pbmdcIjogXCJBIHN0YXRlIG9mIGRlZXAgc2VhdGVkIGlsbCB3aWxsXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ3b3JkXCI6IFwiSU1QRVJUSU5FTlRcIixcbiAgICAgICAgXCJtZWFuaW5nXCI6IFwiSW1wcm9wZXJseSBmb3J3YXJkIG9yIGJvbGRcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIndvcmRcIjogXCJJTVBVREVOVFwiLFxuICAgICAgICBcIm1lYW5pbmdcIjogXCJJbXByb3Blcmx5IGZvcndhcmQgb3IgYm9sZFwiXG4gICAgfVxuXTtcblxuZXhwb3J0IGNvbnN0IFBMQUNFSE9MREVSX1RFWFQgPSBgRW50ZXIgd29yZHMgYXJyYXkgaGVyZS4uLlxuRWc6LVxuJHtKU09OLnN0cmluZ2lmeShERUZBVUxUX1dPUkRTLnNsaWNlKDAsIDIpLCBudWxsLCAyKX1cbmA7XG4iXSwic291cmNlUm9vdCI6IiJ9