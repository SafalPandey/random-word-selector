(self.webpackChunkrandom_word_selector=self.webpackChunkrandom_word_selector||[]).push([[16],{16:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var r=n(294),a=n(977);const o=function({settings:e,setSettings:t}){return r.createElement(r.Fragment,null,r.createElement("h2",{className:"text-2xl leading-5 mt-8 mb-4"},"Settings"),r.createElement("div",{id:"settings",style:{width:"80%"}},r.createElement("input",{type:"checkbox",id:"display-meaning-setting",onChange:e=>t({shouldShowMeaning:e.target.checked}),checked:e.shouldShowMeaning}),r.createElement("label",{htmlFor:"display-meaning-setting",className:"mx-2"},"Display the meaning of current word")),r.createElement("br",null))};var i=n(997),s=n(61);const d=function(e){const{setCustomWords:t,customWords:n,dataSource:a,setDataSource:o}=e;return r.createElement(r.Fragment,null,r.createElement("h2",{className:"text-2xl leading-5 my-4"},"Data source"),r.createElement("div",{id:"words-input-div",style:{width:"100%",display:"flex",flexDirection:"row",flexWrap:"wrap"}},r.createElement("div",{id:"source-setting",style:{width:"20%"}},r.createElement("input",{id:"input-source-static",name:"data-source",type:"radio",onClick:()=>o(s.N.STATIC),defaultChecked:a===s.N.STATIC}),r.createElement("label",{htmlFor:"input-source-static",className:"mx-2"},r.createElement("strong",null,"Static list")),r.createElement("br",null),r.createElement("br",null),r.createElement("input",{id:"input-source-api",name:"data-source",type:"radio",onClick:()=>o(s.N.API),defaultChecked:a===s.N.API}),r.createElement("label",{htmlFor:"input-source-api",className:"mx-2"},r.createElement("strong",null,"API source"))),r.createElement("div",{id:"source-input",style:{width:"80%"}},a===s.N.STATIC?r.createElement("textarea",{id:"input-static-list",onChange:e=>t(e.target.value),placeholder:i.Q,className:"rounded p-3 bg-gray-800 text-gray-50",style:{height:"50vh",width:"80%"},value:n}):r.createElement("em",{style:{height:"15vh",width:"80%"}},'Data will be fetched from "',s.W,'".'))))};var l=n(101),m=n(825),c=n(844);const u=function(){const e=(0,a.k6)(),[t,n,i]=(0,m.o)(),[u,g]=(0,c.d)(),{dataSource:w,shouldShowMeaning:h}=u,E=t&&JSON.stringify(t,null,2)||"",[p,y]=(0,r.useState)(E),[f,A]=(0,r.useState)(w);return r.createElement("div",{className:"flex-wrap"},r.createElement(d,{words:t,settings:u,dataSource:f,customWords:p,setDataSource:A,setCustomWords:y}),r.createElement(o,{settings:u,setSettings:g}),r.createElement("button",{className:"float-right py-2 px-4 font-semibold rounded-lg shadow-md text-white bg-green-500 hover:bg-green-700",onClick:()=>{try{f===s.N.STATIC&&(()=>{if(!p)return void i();const e=(0,l.c)(p,h);n(e)})(),g({dataSource:f}),e.push("/selector")}catch(e){console.error(e),alert(e.message)}}},"Submit"))}},997:(e,t,n)=>{"use strict";n.d(t,{X:()=>r,Q:()=>a});const r=[{word:"FLABBERGASTED",meaning:"As if struck dumb with astonishment and surprise"},{word:"ARCANE",meaning:"Requiring secret or mysterious knowledge"},{word:"GLUTTONY",meaning:"Habitual eating to excess"},{word:"EMPATHY",meaning:"Understanding and entering into another s feelings"},{word:"INEPT",meaning:"Generally incompetent and ineffectual"},{word:"IMPECCABLE",meaning:"Without fault or error"},{word:"EMBEZZLE",meaning:"Appropriate fraudulently to one s own use"},{word:"ABERRATION",meaning:"A state or condition markedly different from the norm"},{word:"DEFERENTIAL",meaning:"Showing courteous regard for people s feelings"},{word:"CUMULATIVE",meaning:"Increasing by successive addition"},{word:"INSATIABLE",meaning:"Impossible to satisfy"},{word:"BRUSQUE",meaning:"Rudely abrupt or blunt in speech or manner"},{word:"INHIBIT",meaning:"Limit the range or extent of"},{word:"CANDOR",meaning:"The quality of being honest and straightforward"},{word:"COMPLACENCY",meaning:"The feeling you have when you are satisfied with yourself"},{word:"GRATUITOUS",meaning:"Unnecessary and unwarranted"},{word:"CONFIDANT",meaning:"Someone to whom private matters are told"},{word:"ELATED",meaning:"Exultantly proud and joyful in high spiritsp"},{word:"FABRICATE",meaning:"Make up something artificial or untrue"},{word:"CALLOUS",meaning:"Emotionally hardened"},{word:"INNATE",meaning:"Present at birth but not necessarily hereditary"},{word:"COERCE",meaning:"Cause to do through pressure or necessity"},{word:"BRAZEN",meaning:"Unrestrained by convention or propriety"},{word:"COHERENT",meaning:"Marked by an orderly and consistent relation of parts"},{word:"APPEASE",meaning:"Make peace with"},{word:"HYPOCRISY",meaning:"Pretending to have qualities or beliefs that you do not have"},{word:"ABHOR",meaning:"Find repugnant"},{word:"INFAMY",meaning:"A state of extreme dishonor"},{word:"FORSAKE",meaning:"Leave someone who needs or counts on you leave in the lurch"},{word:"DILIGENT",meaning:"Quietly and steadily persevering in detail or exactness"},{word:"AMIABLE",meaning:"Diffusing warmth and friendliness"},{word:"ELOQUENT",meaning:"Expressing yourself readily clearly effectively"},{word:"ENMITY",meaning:"A state of deep seated ill will"},{word:"IMPERTINENT",meaning:"Improperly forward or bold"},{word:"IMPUDENT",meaning:"Improperly forward or bold"}],a=`Enter words array here...\nEg:-\n${JSON.stringify(r.slice(0,2),null,2)}\n`},101:(e,t,n)=>{"use strict";function r(e,t){let n;try{n=JSON.parse(e)}catch(t){n=e.split(",").reduce(((e,t)=>{const n=t.trim();return n&&e.push({word:n}),e}),[])}if(!Array.isArray(n))throw new Error("Custom words needs to be an array.");for(let{word:e,meaning:r}of n){if(!e)throw new Error(`Every element in passed data must have a "word" ${t?'as well as a "meaning"':""} property.`);if(t&&!r)throw new Error('Every element in passed data must have a "meaning" property.\n\nTurn off "Display meaning of current word" setting to continue without "meaning" property.')}return n}n.d(t,{c:()=>r})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYW5kb20td29yZC1zZWxlY3Rvci8uL3NyYy9jb21wb25lbnRzL1NldHRpbmdzLmpzIiwid2VicGFjazovL3JhbmRvbS13b3JkLXNlbGVjdG9yLy4vc3JjL2NvbXBvbmVudHMvRGF0YVNvdXJjZS5qcyIsIndlYnBhY2s6Ly9yYW5kb20td29yZC1zZWxlY3Rvci8uL3NyYy9jb21wb25lbnRzL0hvbWUuanMiLCJ3ZWJwYWNrOi8vcmFuZG9tLXdvcmQtc2VsZWN0b3IvLi9zcmMvZGF0YS5qcyIsIndlYnBhY2s6Ly9yYW5kb20td29yZC1zZWxlY3Rvci8uL3NyYy91dGlscy93b3Jkcy5qcyJdLCJuYW1lcyI6WyJzZXR0aW5ncyIsInNldFNldHRpbmdzIiwiY2xhc3NOYW1lIiwiaWQiLCJzdHlsZSIsIndpZHRoIiwidHlwZSIsIm9uQ2hhbmdlIiwiZSIsInNob3VsZFNob3dNZWFuaW5nIiwidGFyZ2V0IiwiY2hlY2tlZCIsImh0bWxGb3IiLCJwcm9wcyIsInNldEN1c3RvbVdvcmRzIiwiY3VzdG9tV29yZHMiLCJkYXRhU291cmNlIiwic2V0RGF0YVNvdXJjZSIsImRpc3BsYXkiLCJmbGV4RGlyZWN0aW9uIiwiZmxleFdyYXAiLCJuYW1lIiwib25DbGljayIsIkRhdGFTb3VyY2VzIiwiZGVmYXVsdENoZWNrZWQiLCJldnQiLCJ2YWx1ZSIsInBsYWNlaG9sZGVyIiwiUExBQ0VIT0xERVJfVEVYVCIsImhlaWdodCIsIlJBTkRPTV9XT1JEX0FQSV9VUkwiLCJoaXN0b3J5IiwidXNlSGlzdG9yeSIsIndvcmRzIiwic2V0V29yZHMiLCJyZXNldFdvcmRzIiwidXNlV29yZHNTdGF0ZSIsInVzZVNldHRpbmdzU3RhdGUiLCJkYXRhU291cmNlU2V0dGluZyIsImRlZmF1bHRDdXN0b21Xb3JkcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJ1c2VTdGF0ZSIsInBhcnNlZEN1c3RvbVdvcmRzIiwicGFyc2VDdXN0b21Xb3JkcyIsInVwZGF0ZUN1c3RvbVN0YXRpY0RhdGEiLCJwdXNoIiwiY29uc29sZSIsImVycm9yIiwiYWxlcnQiLCJtZXNzYWdlIiwiREVGQVVMVF9XT1JEUyIsInNsaWNlIiwicGFyc2UiLCJzcGxpdCIsInJlZHVjZSIsImFjYyIsIndvcmQiLCJ0cmltbWVkV29yZCIsInRyaW0iLCJBcnJheSIsImlzQXJyYXkiLCJFcnJvciIsIm1lYW5pbmciXSwibWFwcGluZ3MiOiI0S0FvQkEsUUFsQkEsVUFBa0IsU0FBRUEsRUFBRixZQUFZQyxJQUM1QixPQUNFLGdDQUNFLHNCQUFJQyxVQUFVLGdDQUFkLFlBQ0EsdUJBQUtDLEdBQUcsV0FBV0MsTUFBTyxDQUFFQyxNQUFPLFFBQ2pDLHlCQUNFQyxLQUFLLFdBQ0xILEdBQUcsMEJBQ0hJLFNBQVdDLEdBQU1QLEVBQVksQ0FBRVEsa0JBQW1CRCxFQUFFRSxPQUFPQyxVQUMzREEsUUFBU1gsRUFBU1Msb0JBRXBCLHlCQUFPRyxRQUFRLDBCQUEwQlYsVUFBVSxRQUFuRCx3Q0FFRiw2QixxQkMyQ04sUUFyREEsU0FBb0JXLEdBQ2xCLE1BQU0sZUFBRUMsRUFBRixZQUFrQkMsRUFBbEIsV0FBK0JDLEVBQS9CLGNBQTJDQyxHQUFrQkosRUFFbkUsT0FDRSxnQ0FDRSxzQkFBSVgsVUFBVSwyQkFBZCxlQUNBLHVCQUFLQyxHQUFHLGtCQUFrQkMsTUFBTyxDQUFFQyxNQUFPLE9BQVFhLFFBQVMsT0FBUUMsY0FBZSxNQUFPQyxTQUFVLFNBQ2pHLHVCQUFLakIsR0FBRyxpQkFBaUJDLE1BQU8sQ0FBRUMsTUFBTyxRQUN2Qyx5QkFDRUYsR0FBRyxzQkFDSGtCLEtBQUssY0FDTGYsS0FBSyxRQUNMZ0IsUUFBUyxJQUFNTCxFQUFjTSxZQUM3QkMsZUFBZ0JSLElBQWVPLGFBRWpDLHlCQUFPWCxRQUFRLHNCQUFzQlYsVUFBVSxRQUM3Qyw4Q0FHRiwyQkFDQSwyQkFFQSx5QkFDRUMsR0FBRyxtQkFDSGtCLEtBQUssY0FDTGYsS0FBSyxRQUNMZ0IsUUFBUyxJQUFNTCxFQUFjTSxTQUM3QkMsZUFBZ0JSLElBQWVPLFVBRWpDLHlCQUFP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VSxFQUFjQyxNQUFNLEVBQUcsR0FBSSxLQUFNLFEsMkJDMUkzQyxTQUFTUixFQUFpQjdCLEVBQWFOLEdBQzVDLElBQUlrQyxFQUVKLElBQ0VBLEVBQW9CSCxLQUFLYSxNQUFNdEMsR0FDL0IsTUFBT1AsR0FDUG1DLEVBQW9CNUIsRUFBWXVDLE1BQU0sS0FBS0MsUUFBTyxDQUFDQyxFQUFLQyxLQUN0RCxNQUFNQyxFQUFjRCxFQUFLRSxPQU16QixPQUpJRCxHQUNGRixFQUFJVixLQUFLLENBQUVXLEtBQU1DLElBR1pGLElBQ04sSUFHTCxJQUFLSSxNQUFNQyxRQUFRbEIsR0FDakIsTUFBTSxJQUFJbUIsTUFBTSxzQ0FHbEIsSUFBSyxJQUFJLEtBQUVMLEVBQUYsUUFBUU0sS0FBYXBCLEVBQW1CLENBQy9DLElBQUtjLEVBQ0gsTUFBTSxJQUFJSyxNQUNQLG1EQUFrRHJELEVBQW9CLHlCQUEyQixnQkFJdEcsR0FBSUEsSUFBc0JzRCxFQUN4QixNQUFNLElBQUlELE1BQ1AsOEpBS1AsT0FBT25CLEUiLCJmaWxlIjoiMTYuNzg3Ni5jaHVuay5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmZ1bmN0aW9uIFNldHRpbmdzKHsgc2V0dGluZ3MsIHNldFNldHRpbmdzIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGgyIGNsYXNzTmFtZT1cInRleHQtMnhsIGxlYWRpbmctNSBtdC04IG1iLTRcIj5TZXR0aW5nczwvaDI+XG4gICAgICA8ZGl2IGlkPVwic2V0dGluZ3NcIiBzdHlsZT17eyB3aWR0aDogJzgwJScgfX0+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgaWQ9XCJkaXNwbGF5LW1lYW5pbmctc2V0dGluZ1wiXG4gICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXRTZXR0aW5ncyh7IHNob3VsZFNob3dNZWFuaW5nOiBlLnRhcmdldC5jaGVja2VkIH0pfVxuICAgICAgICAgIGNoZWNrZWQ9e3NldHRpbmdzLnNob3VsZFNob3dNZWFuaW5nfVxuICAgICAgICAvPlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImRpc3BsYXktbWVhbmluZy1zZXR0aW5nXCIgY2xhc3NOYW1lPVwibXgtMlwiPkRpc3BsYXkgdGhlIG1lYW5pbmcgb2YgY3VycmVudCB3b3JkPC9sYWJlbD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGJyIC8+XG4gICAgPC8+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNldHRpbmdzO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgUExBQ0VIT0xERVJfVEVYVCB9IGZyb20gJy4uL2RhdGEnO1xuaW1wb3J0IHsgRGF0YVNvdXJjZXMsIFJBTkRPTV9XT1JEX0FQSV9VUkwgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5mdW5jdGlvbiBEYXRhU291cmNlKHByb3BzKSB7XG4gIGNvbnN0IHsgc2V0Q3VzdG9tV29yZHMsIGN1c3RvbVdvcmRzLCBkYXRhU291cmNlLCBzZXREYXRhU291cmNlIH0gPSBwcm9wcztcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8aDIgY2xhc3NOYW1lPVwidGV4dC0yeGwgbGVhZGluZy01IG15LTRcIj5EYXRhIHNvdXJjZTwvaDI+XG4gICAgICA8ZGl2IGlkPVwid29yZHMtaW5wdXQtZGl2XCIgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJywgZGlzcGxheTogJ2ZsZXgnLCBmbGV4RGlyZWN0aW9uOiAncm93JywgZmxleFdyYXA6ICd3cmFwJyB9fT5cbiAgICAgICAgPGRpdiBpZD1cInNvdXJjZS1zZXR0aW5nXCIgc3R5bGU9e3sgd2lkdGg6ICcyMCUnIH19PlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgaWQ9XCJpbnB1dC1zb3VyY2Utc3RhdGljXCJcbiAgICAgICAgICAgIG5hbWU9XCJkYXRhLXNvdXJjZVwiXG4gICAgICAgICAgICB0eXBlPVwicmFkaW9cIlxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0RGF0YVNvdXJjZShEYXRhU291cmNlcy5TVEFUSUMpfVxuICAgICAgICAgICAgZGVmYXVsdENoZWNrZWQ9e2RhdGFTb3VyY2UgPT09IERhdGFTb3VyY2VzLlNUQVRJQ31cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiaW5wdXQtc291cmNlLXN0YXRpY1wiIGNsYXNzTmFtZT1cIm14LTJcIj5cbiAgICAgICAgICAgIDxzdHJvbmc+U3RhdGljIGxpc3Q8L3N0cm9uZz5cbiAgICAgICAgICA8L2xhYmVsPlxuXG4gICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgPGJyIC8+XG5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIGlkPVwiaW5wdXQtc291cmNlLWFwaVwiXG4gICAgICAgICAgICBuYW1lPVwiZGF0YS1zb3VyY2VcIlxuICAgICAgICAgICAgdHlwZT1cInJhZGlvXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldERhdGFTb3VyY2UoRGF0YVNvdXJjZXMuQVBJKX1cbiAgICAgICAgICAgIGRlZmF1bHRDaGVja2VkPXtkYXRhU291cmNlID09PSBEYXRhU291cmNlcy5BUEl9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImlucHV0LXNvdXJjZS1hcGlcIiBjbGFzc05hbWU9XCJteC0yXCI+XG4gICAgICAgICAgICA8c3Ryb25nPkFQSSBzb3VyY2U8L3N0cm9uZz5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGlkPVwic291cmNlLWlucHV0XCIgc3R5bGU9e3sgd2lkdGg6ICc4MCUnIH19PlxuICAgICAgICAgIHtkYXRhU291cmNlID09PSBEYXRhU291cmNlcy5TVEFUSUMgPyAoXG4gICAgICAgICAgICA8dGV4dGFyZWFcbiAgICAgICAgICAgICAgaWQ9XCJpbnB1dC1zdGF0aWMtbGlzdFwiXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZXZ0KSA9PiBzZXRDdXN0b21Xb3JkcyhldnQudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e1BMQUNFSE9MREVSX1RFWFR9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInJvdW5kZWQgcC0zIGJnLWdyYXktODAwIHRleHQtZ3JheS01MFwiXG4gICAgICAgICAgICAgIHN0eWxlPXt7IGhlaWdodDogJzUwdmgnLCB3aWR0aDogJzgwJScgfX1cbiAgICAgICAgICAgICAgdmFsdWU9e2N1c3RvbVdvcmRzfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPGVtIHN0eWxlPXt7IGhlaWdodDogJzE1dmgnLCB3aWR0aDogJzgwJScgfX0+RGF0YSB3aWxsIGJlIGZldGNoZWQgZnJvbSBcIntSQU5ET01fV09SRF9BUElfVVJMfVwiLjwvZW0+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8Lz5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgRGF0YVNvdXJjZTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUhpc3RvcnkgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuXG5pbXBvcnQgU2V0dGluZ3MgZnJvbSAnLi9TZXR0aW5ncyc7XG5pbXBvcnQgRGF0YVNvdXJjZSBmcm9tICcuL0RhdGFTb3VyY2UnO1xuaW1wb3J0IHsgRGF0YVNvdXJjZXMgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgcGFyc2VDdXN0b21Xb3JkcyB9IGZyb20gJy4uL3V0aWxzL3dvcmRzJztcbmltcG9ydCB7IHVzZVdvcmRzU3RhdGUgfSBmcm9tICcuLi9jb250ZXh0cy93b3Jkcyc7XG5pbXBvcnQgeyB1c2VTZXR0aW5nc1N0YXRlIH0gZnJvbSAnLi4vY29udGV4dHMvc2V0dGluZ3MnO1xuXG5mdW5jdGlvbiBIb21lKCkge1xuICBjb25zdCBoaXN0b3J5ID0gdXNlSGlzdG9yeSgpO1xuICBjb25zdCBbd29yZHMsIHNldFdvcmRzLCByZXNldFdvcmRzXSA9IHVzZVdvcmRzU3RhdGUoKTtcbiAgY29uc3QgW3NldHRpbmdzLCBzZXRTZXR0aW5nc10gPSB1c2VTZXR0aW5nc1N0YXRlKCk7XG5cbiAgY29uc3QgeyBkYXRhU291cmNlOiBkYXRhU291cmNlU2V0dGluZywgc2hvdWxkU2hvd01lYW5pbmcgfSA9IHNldHRpbmdzO1xuXG4gIGNvbnN0IGRlZmF1bHRDdXN0b21Xb3JkcyA9ICh3b3JkcyAmJiBKU09OLnN0cmluZ2lmeSh3b3JkcywgbnVsbCwgMikpIHx8ICcnO1xuICBjb25zdCBbY3VzdG9tV29yZHMsIHNldEN1c3RvbVdvcmRzXSA9IHVzZVN0YXRlKGRlZmF1bHRDdXN0b21Xb3Jkcyk7XG4gIGNvbnN0IFtkYXRhU291cmNlLCBzZXREYXRhU291cmNlXSA9IHVzZVN0YXRlKGRhdGFTb3VyY2VTZXR0aW5nKTtcblxuICBjb25zdCB1cGRhdGVDdXN0b21TdGF0aWNEYXRhID0gKCkgPT4ge1xuICAgIGlmICghY3VzdG9tV29yZHMpIHtcbiAgICAgIHJlc2V0V29yZHMoKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBhcnNlZEN1c3RvbVdvcmRzID0gcGFyc2VDdXN0b21Xb3JkcyhjdXN0b21Xb3Jkcywgc2hvdWxkU2hvd01lYW5pbmcpO1xuICAgIHNldFdvcmRzKHBhcnNlZEN1c3RvbVdvcmRzKTtcbiAgfTtcblxuICBjb25zdCBvblN1Ym1pdCA9ICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgaWYgKGRhdGFTb3VyY2UgPT09IERhdGFTb3VyY2VzLlNUQVRJQykge1xuICAgICAgICB1cGRhdGVDdXN0b21TdGF0aWNEYXRhKCk7XG4gICAgICB9XG5cbiAgICAgIHNldFNldHRpbmdzKHsgZGF0YVNvdXJjZSB9KTtcbiAgICAgIGhpc3RvcnkucHVzaCgnL3NlbGVjdG9yJyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgIGFsZXJ0KGUubWVzc2FnZSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4LXdyYXBcIj5cbiAgICAgIDxEYXRhU291cmNlIHsuLi57IHdvcmRzLCBzZXR0aW5ncywgZGF0YVNvdXJjZSwgY3VzdG9tV29yZHMsIHNldERhdGFTb3VyY2UsIHNldEN1c3RvbVdvcmRzIH19IC8+XG4gICAgICA8U2V0dGluZ3Mgc2V0dGluZ3M9e3NldHRpbmdzfSBzZXRTZXR0aW5ncz17c2V0U2V0dGluZ3N9IC8+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNsYXNzTmFtZT1cImZsb2F0LXJpZ2h0IHB5LTIgcHgtNCBmb250LXNlbWlib2xkIHJvdW5kZWQtbGcgc2hhZG93LW1kIHRleHQtd2hpdGUgYmctZ3JlZW4tNTAwIGhvdmVyOmJnLWdyZWVuLTcwMFwiXG4gICAgICAgIG9uQ2xpY2s9e29uU3VibWl0fVxuICAgICAgPlxuICAgICAgICBTdWJtaXRcbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBIb21lO1xuIiwiZXhwb3J0IGNvbnN0IERFRkFVTFRfV09SRFMgPSBbXG4gICAge1xuICAgICAgICBcIndvcmRcIjogXCJGTEFCQkVSR0FTVEVEXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIkFzIGlmIHN0cnVjayBkdW1iIHdpdGggYXN0b25pc2htZW50IGFuZCBzdXJwcmlzZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwid29yZFwiOiBcIkFSQ0FORVwiLFxuICAgICAgICBcIm1lYW5pbmdcIjogXCJSZXF1aXJpbmcgc2VjcmV0IG9yIG15c3RlcmlvdXMga25vd2xlZGdlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ3b3JkXCI6IFwiR0xVVFRPTllcIixcbiAgICAgICAgXCJtZWFuaW5nXCI6IFwiSGFiaXR1YWwgZWF0aW5nIHRvIGV4Y2Vzc1wiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwid29yZFwiOiBcIkVNUEFUSFlcIixcbiAgICAgICAgXCJtZWFuaW5nXCI6IFwiVW5kZXJzdGFuZGluZyBhbmQgZW50ZXJpbmcgaW50byBhbm90aGVyIHMgZmVlbGluZ3NcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIndvcmRcIjogXCJJTkVQVFwiLFxuICAgICAgICBcIm1lYW5pbmdcIjogXCJHZW5lcmFsbHkgaW5jb21wZXRlbnQgYW5kIGluZWZmZWN0dWFsXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ3b3JkXCI6IFwiSU1QRUNDQUJMRVwiLFxuICAgICAgICBcIm1lYW5pbmdcIjogXCJXaXRob3V0IGZhdWx0IG9yIGVycm9yXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ3b3JkXCI6IFwiRU1CRVpaTEVcIixcbiAgICAgICAgXCJtZWFuaW5nXCI6IFwiQXBwcm9wcmlhdGUgZnJhdWR1bGVudGx5IHRvIG9uZSBzIG93biB1c2VcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIndvcmRcIjogXCJBQkVSUkFUSU9OXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIkEgc3RhdGUgb3IgY29uZGl0aW9uIG1hcmtlZGx5IGRpZmZlcmVudCBmcm9tIHRoZSBub3JtXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ3b3JkXCI6IFwiREVGRVJFTlRJQUxcIixcbiAgICAgICAgXCJtZWFuaW5nXCI6IFwiU2hvd2luZyBjb3VydGVvdXMgcmVnYXJkIGZvciBwZW9wbGUgcyBmZWVsaW5nc1wiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwid29yZFwiOiBcIkNVTVVMQVRJVkVcIixcbiAgICAgICAgXCJtZWFuaW5nXCI6IFwiSW5jcmVhc2luZyBieSBzdWNjZXNzaXZlIGFkZGl0aW9uXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ3b3JkXCI6IFwiSU5TQVRJQUJMRVwiLFxuICAgICAgICBcIm1lYW5pbmdcIjogXCJJbXBvc3NpYmxlIHRvIHNhdGlzZnlcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIndvcmRcIjogXCJCUlVTUVVFXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIlJ1ZGVseSBhYnJ1cHQgb3IgYmx1bnQgaW4gc3BlZWNoIG9yIG1hbm5lclwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwid29yZFwiOiBcIklOSElCSVRcIixcbiAgICAgICAgXCJtZWFuaW5nXCI6IFwiTGltaXQgdGhlIHJhbmdlIG9yIGV4dGVudCBvZlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwid29yZFwiOiBcIkNBTkRPUlwiLFxuICAgICAgICBcIm1lYW5pbmdcIjogXCJUaGUgcXVhbGl0eSBvZiBiZWluZyBob25lc3QgYW5kIHN0cmFpZ2h0Zm9yd2FyZFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwid29yZFwiOiBcIkNPTVBMQUNFTkNZXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIlRoZSBmZWVsaW5nIHlvdSBoYXZlIHdoZW4geW91IGFyZSBzYXRpc2ZpZWQgd2l0aCB5b3Vyc2VsZlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwid29yZFwiOiBcIkdSQVRVSVRPVVNcIixcbiAgICAgICAgXCJtZWFuaW5nXCI6IFwiVW5uZWNlc3NhcnkgYW5kIHVud2FycmFudGVkXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ3b3JkXCI6IFwiQ09ORklEQU5UXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIlNvbWVvbmUgdG8gd2hvbSBwcml2YXRlIG1hdHRlcnMgYXJlIHRvbGRcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIndvcmRcIjogXCJFTEFURURcIixcbiAgICAgICAgXCJtZWFuaW5nXCI6IFwiRXh1bHRhbnRseSBwcm91ZCBhbmQgam95ZnVsIGluIGhpZ2ggc3Bpcml0c3BcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIndvcmRcIjogXCJGQUJSSUNBVEVcIixcbiAgICAgICAgXCJtZWFuaW5nXCI6IFwiTWFrZSB1cCBzb21ldGhpbmcgYXJ0aWZpY2lhbCBvciB1bnRydWVcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIndvcmRcIjogXCJDQUxMT1VTXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIkVtb3Rpb25hbGx5IGhhcmRlbmVkXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ3b3JkXCI6IFwiSU5OQVRFXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIlByZXNlbnQgYXQgYmlydGggYnV0IG5vdCBuZWNlc3NhcmlseSBoZXJlZGl0YXJ5XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ3b3JkXCI6IFwiQ09FUkNFXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIkNhdXNlIHRvIGRvIHRocm91Z2ggcHJlc3N1cmUgb3IgbmVjZXNzaXR5XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ3b3JkXCI6IFwiQlJBWkVOXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIlVucmVzdHJhaW5lZCBieSBjb252ZW50aW9uIG9yIHByb3ByaWV0eVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwid29yZFwiOiBcIkNPSEVSRU5UXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIk1hcmtlZCBieSBhbiBvcmRlcmx5IGFuZCBjb25zaXN0ZW50IHJlbGF0aW9uIG9mIHBhcnRzXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ3b3JkXCI6IFwiQVBQRUFTRVwiLFxuICAgICAgICBcIm1lYW5pbmdcIjogXCJNYWtlIHBlYWNlIHdpdGhcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIndvcmRcIjogXCJIWVBPQ1JJU1lcIixcbiAgICAgICAgXCJtZWFuaW5nXCI6IFwiUHJldGVuZGluZyB0byBoYXZlIHF1YWxpdGllcyBvciBiZWxpZWZzIHRoYXQgeW91IGRvIG5vdCBoYXZlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ3b3JkXCI6IFwiQUJIT1JcIixcbiAgICAgICAgXCJtZWFuaW5nXCI6IFwiRmluZCByZXB1Z25hbnRcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIndvcmRcIjogXCJJTkZBTVlcIixcbiAgICAgICAgXCJtZWFuaW5nXCI6IFwiQSBzdGF0ZSBvZiBleHRyZW1lIGRpc2hvbm9yXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ3b3JkXCI6IFwiRk9SU0FLRVwiLFxuICAgICAgICBcIm1lYW5pbmdcIjogXCJMZWF2ZSBzb21lb25lIHdobyBuZWVkcyBvciBjb3VudHMgb24geW91IGxlYXZlIGluIHRoZSBsdXJjaFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwid29yZFwiOiBcIkRJTElHRU5UXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIlF1aWV0bHkgYW5kIHN0ZWFkaWx5IHBlcnNldmVyaW5nIGluIGRldGFpbCBvciBleGFjdG5lc3NcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIndvcmRcIjogXCJBTUlBQkxFXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIkRpZmZ1c2luZyB3YXJtdGggYW5kIGZyaWVuZGxpbmVzc1wiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwid29yZFwiOiBcIkVMT1FVRU5UXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIkV4cHJlc3NpbmcgeW91cnNlbGYgcmVhZGlseSBjbGVhcmx5IGVmZmVjdGl2ZWx5XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ3b3JkXCI6IFwiRU5NSVRZXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIkEgc3RhdGUgb2YgZGVlcCBzZWF0ZWQgaWxsIHdpbGxcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIndvcmRcIjogXCJJTVBFUlRJTkVOVFwiLFxuICAgICAgICBcIm1lYW5pbmdcIjogXCJJbXByb3Blcmx5IGZvcndhcmQgb3IgYm9sZFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwid29yZFwiOiBcIklNUFVERU5UXCIsXG4gICAgICAgIFwibWVhbmluZ1wiOiBcIkltcHJvcGVybHkgZm9yd2FyZCBvciBib2xkXCJcbiAgICB9XG5dO1xuXG5leHBvcnQgY29uc3QgUExBQ0VIT0xERVJfVEVYVCA9IGBFbnRlciB3b3JkcyBhcnJheSBoZXJlLi4uXG5FZzotXG4ke0pTT04uc3RyaW5naWZ5KERFRkFVTFRfV09SRFMuc2xpY2UoMCwgMiksIG51bGwsIDIpfVxuYDtcbiIsIi8qKlxuICogUGFyc2VzIGFuZCB2YWxpZGF0ZXMgdGhlIHBhc3NlZCBjdXN0b20gd29yZHMgYW5kIHRocm93cyBhcHByb3ByaWF0ZSBlcnJvcnMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGN1c3RvbVdvcmRzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHNob3VsZFNob3dNZWFuaW5nXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDdXN0b21Xb3JkcyhjdXN0b21Xb3Jkcywgc2hvdWxkU2hvd01lYW5pbmcpIHtcbiAgbGV0IHBhcnNlZEN1c3RvbVdvcmRzO1xuXG4gIHRyeSB7XG4gICAgcGFyc2VkQ3VzdG9tV29yZHMgPSBKU09OLnBhcnNlKGN1c3RvbVdvcmRzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHBhcnNlZEN1c3RvbVdvcmRzID0gY3VzdG9tV29yZHMuc3BsaXQoJywnKS5yZWR1Y2UoKGFjYywgd29yZCkgPT4ge1xuICAgICAgY29uc3QgdHJpbW1lZFdvcmQgPSB3b3JkLnRyaW0oKTtcblxuICAgICAgaWYgKHRyaW1tZWRXb3JkKSB7XG4gICAgICAgIGFjYy5wdXNoKHsgd29yZDogdHJpbW1lZFdvcmQgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgW10pO1xuICB9XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KHBhcnNlZEN1c3RvbVdvcmRzKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQ3VzdG9tIHdvcmRzIG5lZWRzIHRvIGJlIGFuIGFycmF5LicpO1xuICB9XG5cbiAgZm9yIChsZXQgeyB3b3JkLCBtZWFuaW5nIH0gb2YgcGFyc2VkQ3VzdG9tV29yZHMpIHtcbiAgICBpZiAoIXdvcmQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEV2ZXJ5IGVsZW1lbnQgaW4gcGFzc2VkIGRhdGEgbXVzdCBoYXZlIGEgXCJ3b3JkXCIgJHtzaG91bGRTaG93TWVhbmluZyA/ICdhcyB3ZWxsIGFzIGEgXCJtZWFuaW5nXCInIDogJyd9IHByb3BlcnR5LmBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHNob3VsZFNob3dNZWFuaW5nICYmICFtZWFuaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBFdmVyeSBlbGVtZW50IGluIHBhc3NlZCBkYXRhIG11c3QgaGF2ZSBhIFwibWVhbmluZ1wiIHByb3BlcnR5LlxcblxcblR1cm4gb2ZmIFwiRGlzcGxheSBtZWFuaW5nIG9mIGN1cnJlbnQgd29yZFwiIHNldHRpbmcgdG8gY29udGludWUgd2l0aG91dCBcIm1lYW5pbmdcIiBwcm9wZXJ0eS5gXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJzZWRDdXN0b21Xb3Jkcztcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=